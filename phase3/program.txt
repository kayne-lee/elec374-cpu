ldi R2, 0x69 ; R2 = 0x69 
00001_0010_0000_0000000000001101001
09000069

ldi R2, 2(R2) ; R2 = 0x6B
00001_0010_0010_0000000000000000010
09100002

ld R1, 0x47 ; R1 = (0x47) = 0x94
00000_0001_0000_0000000000001000111
00800047

ldi R1, 1(R1) ; R1 = 0x95
00001_0001_0001_0000000000000000001
08880001

ld R0, -7(R1) ; R0 = (0x8E) = 0x34
00000_0000_0001_1111111111111111001
000FFFF9

ldi R3, 3 ; R3 = 3
00001_0011_0000_0000000000000000011
09800003

ldi R2, 0x43 ; R2 = 0x43
00001_0010_0000_0000000000001000011
09000043

brmi R2, 3 ; continue with the next instruction (will not branch)
10011_0010_0011_0000000000000000000
99180000

ldi R2, 6(R2) ; R2 = 0x49
00001_0010_0010_0000000000000000110
09100006


ld R7, -2(R2) ; R7 = (0x49 - 2) = 0x94
00000_0111_0010_1111111111111111110
0397FFFE

nop
11010_0000_0000_0000000000000000000
D0000000

brpl R7, 2 ; continue with the instruction at “target” (will branch)
10011_0111_0010_0000000000000000010
9B900002

ldi R5, 4(R2) ; this instruction will not execute
00001_0101_0010_0000000000000000100
0A900004

ldi R4, -3(R5) ; this instruction will not execute
00001_0100_0101_1111111111111111101
0A2FFFFD

target: add R2, R2, R3 ; R2 = 0x4C
00011_0010_0010_0011_000000000000000
19118000

addi R7, R7, 3 ; R7 = 0x97
01100_0111_0111_0000000000000000011
63B80003

neg R7, R7 ; R7 = 0xFFFFFF69
10001_0111_0111_0000000000000000000
8BB80000

not R7, R7 ; R7 = 0x96
10010_0111_0111_0000000000000000000
93B80000

andi R7, R7, 0xF ; R7 = 6
01101_0111_0111_0000000000000001111
6BB8000F

ror R1, R0, R3 ; R1 = 0x80000006
01000_0001_0000_0011_000000000000000
40818000

ori R7, R1, 9 ; R7 = 0x8000000F
01110_0111_0001_0000000000000001001
73880009

shra R1, R7, R3 ; R1 = 0xF0000001
00110_0001_0111_0011_000000000000000
30B98000

shr R2, R2, R3 ; R2 = 9
00101_0010_0010_0011_000000000000000
29118000

st 0x8E, R2 ; (0x8E) = 9 new value in memory with address 0x8E
00010_0000_0010_0000000000010001110
1010008E

rol R2, R0, R3 ; R2 = 0x1A0
01001_0010_0000_0011_000000000000000
49018000

or R4, R3, R0 ; R4 = 0x37
01011_0100_0011_0000_000000000000000
5A180000

and R1, R2, R0 ; R1 = 0x20
01010_0001_0010_0000_000000000000000
50900000

st 0x27(R1), R4 ; (0x47) = 0x37 new value in memory with address 0x47
00010_0001_0100_0000000000000100111
10A00027

sub R0, R2, R4 ; R0 = 0x169
00100_0000_0010_0100_000000000000000
20120000

shl R1, R2, R3 ; R1 = 0xD00
00111_0001_0010_0011_000000000000000
38918000

ldi R4, 6 ; R4 = 6
00001_0100_0000_0000000000000000110
A000006

ldi R5, 0x1B ; R5 = 0x1B
00001_0101_0000_0000000000000011011
A80001B

mul R5, R4 ; HI = 0; LO = 0xA2
01111_0101_0100_0000000000000000000
7AA00000

mfhi R7 ; R7 = 0
11000_0111_0000_0000000000000000000
C3800000

mflo R6 ; R6 = 0xA2
11001_0110_0000_0000000000000000000
CB000000

div R5, R4 ; HI = 3, LO = 4
10000_0101_0100_0000000000000000000
82A00000

ldi R10, 1(R4) ; R10 = 7 setting up argument registers 
00001_1010_0100_0000000000000000001
D200001

ldi R11, -2(R5) ; R11 = 0x19 R8, R9, R10, and R11
00001_1011_0101_1111111111111111110
DAFFFFE

ldi R12, 0(R6) ; R12 = 0xA2
00001_1100_0110_0000000000000000000
E300000

ldi R13, 3(R7) ; R13 = 3
00001_1101_0111_0000000000000000011
EB80003

jal R12 ; address of subroutine subA in R12 - return address in R15
10101_1100_0000_0000000000000000000
AE000000

halt ; upon return, the program halts (0x29)
11011_0000_0000_0000000000000000000
D8000000

ORG 0xA2
add R9, R10, R12 ; R8 and R9 are return value registers
00011_1001_1010_1100_000000000000000
1CD60000

sub R8, R11, R13 ; R9 = 0xA9, R8 = 0x16
00100_1000_1011_1101_000000000000000
245E8000

sub R9, R9, R8 ; R9 = 0x93
00100_1001_1001_1000_000000000000000
24CC0000

jr R15 ; return from procedure
10100_1111_0000_0000_000000000000000
A7800000